// vim: set sw=2:
doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title React

    link(rel='stylesheet', type='text/css', href='build/build.css')

  body

    article

      section
        h1 React

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 React is not...
        ul
          li an architecture (like MVC)
          li a web framework (like Ember.js)

      section
        h2
          span React is a 
          em library 
          span that implements...
        ul
          li a virtual dom
          li a dom diffing and patching algorithm

      section
        h2 to achieve
        ul
          li
            em Simplicity
        h2 through
        ul
          li
            em Robustness
          li
            em Predictability

      section
        h2 The obligatory quote
        blockquote
          span [...] we should do (as wise programmers aware of our limitations) our utmost to 
          em shorten the conceptual gap between the static program and the dynamic process
          span , to make the correspondence between the program (spread out in text space) and the process (spread out in time) as trivial as possible. 
        p.citation E.W. Dijkstra (1968) "A Case against the GO TO Statement"
        aside
          p obligatory quote
          blockquote
            p Our intellectual powers are rather geared to master static relations and that our powers to visualize processes evolving in time are relatively poorly developed. For that reason we should do (as wise programmers aware of our limitations) our utmost to shorten the conceptual gap between the static program and the dynamic process, to make the correspondence between the program (spread out in text space) and the process (spread out in time) as trivial as possible. 
          p by Dijkstra

      section
        h2 Why Simplicity
        ul
          li less to keep in mind
          li 
            span fewer mistakes, 
            em fewer bugs
          li
            span easier to 
            em learn
          li 
            span easier to 
            em adapt

      section
        h2 Bullet List
        h3.bullet Powered by <a href="https://github.com/markdalgleish/bespoke-bullets">bespoke-bullets</a>
        ul
          li Bullet 1
          li Bullet 2
          li Bullet 3

      section
        h2 Syntax Highlighting
        h3 Powered by <a href="http://twitter.com/LeaVerou">Lea Verou</a>'s <a href="https://github.com/LeaVerou/prism">Prism</a>
        pre.line-numbers
          code.language-coffeescript.
            bespoke.from 'article', [
              classes(),
              keys(),
              touch(),
              bullets('li, .bullet')
            ]

      section(data-bespoke-hash='named-route')
        h2 Named Route
        h3 Powered by <a href="https://github.com/markdalgleish/bespoke-hash">bespoke-hash</a>
        p Look up! This route has been named with a <em>'data-bespoke-hash'</em> attribute.

      section.emphatic-text(data-bespoke-backdrop='emphatic')
        h2 Emphatic Slide!
        h3 Powered by <a href="https://github.com/markdalgleish/bespoke-backdrop">bespoke-backdrop</a>

      section
        h2.bullet Just the beginning...
        br
        ul
          li Edit <a href="http://jade-lang.com/">Jade</a> markup in <em>'src/index.jade'</em>
          li Edit <a href="http://learnboost.github.io/stylus/">Stylus</a> styles in <em>'src/styles/main.styl'</em>
          li Edit JavaScript in <em>'src/scripts/main.js'</em>
        br
        ul
          li
            strong Enjoy! :)
            a(href='http://twitter.com/markdalgleish')  -@markdalgleish

    script(src='build/build.js')
